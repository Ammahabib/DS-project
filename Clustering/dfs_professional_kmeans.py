# -*- coding: utf-8 -*-
"""DFS_professional_kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aeuvQow5mg1wzTdIN4QCGx2mwFSMO-ch
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
# %matplotlib inline

df=pd.read_csv("Cleaned_dataset.csv")

df.head(10)

#drop categorical variables
df1=df.drop(['BOROUGH', 'NEIGHBORHOOD','BUILDING_CLASS_CATEGORY','TAX_CLASS_AT_PRESENT','BLOCK','LOT','BUILDING_CLASS_AT_PRESENT','ADDRESS','APARTMENT_NUMBER','YEAR_BUILT','TAX_CLASS_AT_TIME_OF_SALE','BUILDING_CLASS_AT_TIME_OF_SALE',
         'SALE_DATE','SALE_YEAR','SALE_MONTH','SALE_QUARTER','SALE_DAY','SALE_WEEKDAY','BUILDING_TYPE','IS_RESIDENTIAL','IS_APARTMENT','RESIDENTIAL_UNITS','COMMERCIAL_UNITS'], axis=1)

df1.isnull().sum().sum()
df1.drop(df.tail(1).index, 
        inplace = True) 
df1

check=geolocator.geocode({"postalcode": 11435})
check.longitude

from tqdm import tqdm
from geopy.geocoders import Nominatim
geolocator = Nominatim()
arr=[]
check=(geolocator.geocode({"postalcode": float(10009)}))
count=0
zip={}
for index, row in tqdm(df1.iterrows()):
  
  zip_code= row['ZIP_CODE']
  zip_code=int(zip_code)
  if zip_code  not in zip:
    check=geolocator.geocode({"postalcode": zip_code})
    zip[zip_code]={
        "longitude": check.longitude,

        "latitude": check.latitude}
    df1['longitude']= check.longitude
    df1['latitude']= check.latitude

  else:
    df1['longitude']= zip[zip_code]['longitude']
    df1['latitude']= zip[zip_code]['latitude']

df1=df1.drop(['ZIP_CODE'], axis=1)

df1

# Convert DataFrame to matrix
from sklearn.cluster import KMeans
X = df1.values
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

from matplotlib.pyplot import figure
figure(num=None, figsize=(18, 16), dpi=80, facecolor='w', edgecolor='k')
 
 
kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)
pred_y = kmeans.fit_predict(X)
plt.scatter(X[:,0], X[:,1])
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')
plt.show()